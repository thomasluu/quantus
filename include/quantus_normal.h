#ifndef QUANTUS_NORMAL_H
#define QUANTUS_NORMAL_H

#include <math_constants.h>

__host__ __device__ __forceinline__ float quantus_normal(float u) {
    float v, p, q, ushift;

    ushift = u - 0.5f;

    v = copysignf(ushift, 0.0f);

    if (v < 0.499433f) {
#ifdef __CUDA_ARCH__
        asm("rsqrt.approx.ftz.f32 %0,%1;" : "=f"(v) : "f"(u - u * u));
#else
        v = rsqrtf(u - u * u);
#endif
        v *= 0.5f;

        p =         0.001732781974270904f;
        p = p * v + 0.1788417306083325f;
        p = p * v + 2.804338363421083f;
        p = p * v + 9.35716893191325f;
        p = p * v + 5.283080058166861f;
        p = p * v + 0.07885390444279965f;
        p *= ushift;
        q =         0.0001796248328874524f;
        q = q * v + 0.02398533988976253f;
        q = q * v + 0.4893072798067982f;
        q = q * v + 2.406460595830034f;
        q = q * v + 3.142947488363618f;
    } else {
        if (ushift > 0.0f) u = 1.0f - u;
#ifdef __CUDA_ARCH__
        asm("lg2.approx.ftz.f32 %0,%1;" : "=f"(v) : "f"(u + u));
        v *= -0.6931471805599453f;
#else       
        v = -logf(u + u);
#endif

        if (v < 22.0f) {
            p =         0.000382438382914666f;
            p = p * v + 0.03679041341785685f;
            p = p * v + 0.5242351532484291f;
            p = p * v + 1.21642047402659f;
            q =         9.14019972725528e-6f;
            q = q * v + 0.003523083799369908f;
            q = q * v + 0.126802543865968f;
            q = q * v + 0.8502031783957995f;
        } else {
            p =         0.00001016962895771568f;
            p = p * v + 0.003330096951634844f;
            p = p * v + 0.1540146885433827f;
            p = p * v + 1.045480394868638f;
            q =         1.303450553973082e-7f;
            q = q * v + 0.0001728926914526662f;
            q = q * v + 0.02031866871146244f;
            q = q * v + 0.3977137974626933f;
        }
        p *= copysignf(v, ushift);
    }
    q = q * v + 1.0f;
#ifdef __CUDA_ARCH__
    asm("rcp.approx.ftz.f32 %0,%1;" : "=f"(v) : "f"(q));
#else
    v = 1.0f / q;
#endif
    return p * v;
}

__host__ __device__ __forceinline__ double quantus_normal(double u)
{
    double v, p, q, ushift;

    ushift = u - 0.5;

    v = copysign(ushift, 0.0);

#if __CUDA_ARCH__ >= 120
    if (all(v < 0.499483203996)) {
#else
    if (v < 0.499483203996) {
#endif
        v = rsqrt(u - u * u);
        v *= 0.5;

        p =         7.2744228279773304710401873082e-8;
        p = p * v + 0.0000421743871813882581153268755947;
        p = p * v + 0.00520379665440516934032831487884;
        p = p * v + 0.225264560844470327491137486146;
        p = p * v + 4.14932318033989880708071080023;
        p = p * v + 35.4767630504161379997123610715;
        p = p * v + 145.073376038130631263518147487;
        p = p * v + 279.375312117440143683363022333;
        p = p * v + 236.365498586700680221243225944;
        p = p * v + 75.0305448544398694183806332634;
        p = p * v + 6.39207201315300014457052458023;
        p = p * v + 0.0167925887515079331460230479124;
        p *= ushift;
        q =         6.75247954960365765875437842188e-9;
        q = q * v + 4.65945444291242666572785117414e-6;
        q = q * v + 0.000655200752555879764745895049551;
        q = q * v + 0.0321185176417740220294374574723;
        q = q * v + 0.675906789081877876894258344513;
        q = q * v + 6.75231637016836002442853621662;
        q = q * v + 33.6182510700950789325981739877;
        q = q * v + 84.7300851352254981643307375148;
        q = q * v + 106.642594343396090577609079223;
        q = q * v + 63.3625936203786444600988073568;
        q = q * v + 15.2022982212427166686341278383;
    } else {
        if (ushift > 0.0) u = 1.0 - u;
        v = -log(u + u);

#if __CUDA_ARCH__ >= 120
        if (all(v < 44.0)) {
#else
        if (v < 44.0) {
#endif
            if (v < 8.0) {
                p =         1.349518868381678058753249e-8;
                p = p * v + 8.52746651977185243009898e-6;
                p = p * v + 0.0007406377273502195713300782;
                p = p * v + 0.02110410727013085360335842;
                p = p * v + 0.2623738494513625927357995;
                p = p * v + 1.636409525694839308796912;
                p = p * v + 5.518808617987600457113932;
                p = p * v + 10.40118297266547564032922;
                p = p * v + 10.8611239302525037936894;
                p = p * v + 5.835965523943366494409442;
                p = p * v + 1.253314137315500218846638;
                q =         3.475390584395848523528879e-7;
                q = q * v + 0.00006713843966407750619673244;
                q = q * v + 0.003234732137701730881039638;
                q = q * v + 0.06142247251750825316341193;
                q = q * v + 0.5598983561302253505510779;
                q = q * v + 2.723933211326168795847825;
                q = q * v + 7.495380651029058089810514;
                q = q * v + 11.93179043337747424406973;
                q = q * v + 10.81567043691618587425845;
                q = q * v + 5.156426788932205027416249;
            } else {
                p =         3.520313516116902104718364e-14;
                p = p * v + 1.290150467609741469439886e-10;
                p = p * v + 6.205583506207842717279345e-8;
                p = p * v + 9.158932787882144364471905e-6;
                p = p * v + 0.0005374401369638208453883002;
                p = p * v + 0.01394912091056901348391011;
                p = p * v + 0.1654924245227317720698501;
                p = p * v + 0.8766747937038415857312223;
                p = p * v + 1.884681361008701399986748;
                p = p * v + 1.252361243983087224074555;
                q =         2.192764889420860512097952e-12;
                q = q * v + 2.388944627137940203964714e-9;
                q = q * v + 6.091425154840720318019782e-7;
                q = q * v + 0.00005611957534780981729681127;
                q = q * v + 0.002210289965119635784953798;
                q = q * v + 0.03993946264733258917755805;
                q = q * v + 0.3362029856232688357862647;
                q = q * v + 1.278191163497808490709652;
                q = q * v + 2.000771714036158414980628;
            }
            p *= copysign(v, ushift);
        } else {
            return -CUDART_SQRT_TWO * erfcinv(u + u);
        }
    }
    q = q * v + 1.0;
    return p / q;
}

#endif
